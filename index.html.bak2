<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Desenhe para Acessar</title>
    <style>
        :root {
            --bg: #0f172a;
            --card: #0b1220;
            --accent: #10b981;
            --pink: #ef4444;
                    const box = userCanvas.parentElement.getBoundingClientRect();
                    const dpr = window.devicePixelRatio || 1;
            
                    // Mantém a proporção do canvas
                    const cssWidth = Math.floor(box.width);
                    const cssHeight = Math.floor(cssWidth * 360/500);
            
                    // Define o tamanho do elemento do canvas
                    userCanvas.style.width = cssWidth + 'px';
                    userCanvas.style.height = cssHeight + 'px';
            
                    // Define o tamanho do buffer do canvas
                    userCanvas.width = cssWidth;
                    userCanvas.height = cssHeight;
            
                    // Ajusta o contexto para DPI
                    uCtx.scale(1, 1);
            color: var(--text);
        }

        .wrap {
            max-width: 800px;
            margin: 36px auto;
                    const rect = userCanvas.getBoundingClientRect();
                    let x, y;

                    if (e.touches && e.touches.length > 0) {
                        x = e.touches[0].clientX - rect.left;
                        y = e.touches[0].clientY - rect.top;
                    } else {
                        x = e.clientX - rect.left;
                        y = e.clientY - rect.top;
                    }

                    // Converte as coordenadas para o espaço do canvas
                    x = (x * userCanvas.width) / rect.width;
                    y = (y * userCanvas.height) / rect.height;
            display: flex;
            gap: 24px;
            flex-wrap: wrap;
            align-items: flex-start;
        }

        .canvas-box {
            width: 500px;
            max-width: 100%;
            overflow: hidden;
            background: linear-gradient(180deg, var(--card), #07121a);
            box-shadow: inset 0 0 0 1px rgba(255,255,255,0.03);
        }
                    const width = Math.max(2, baseBrushSize * (0.8 + pressure * 0.7));
        canvas {
            width: 100%;
            height: auto;
            display: block;
            touch-action: none;
            background: transparent;
        }

        .controls {
            display: flex;
            flex-direction: column;
            gap: 12px;
            flex: 1;
            min-width: 200px;
        }

        .color-picker {
            background: rgba(255,255,255,0.03);
            padding: 12px;
            border-radius: 10px;
        }

        .color-picker label,
        .brush-size label {
            display: block;
            color: var(--muted);
            font-size: 13px;
            margin-bottom: 8px;
        }

        .brush-size {
            background: rgba(255,255,255,0.03);
            padding: 12px;
            border-radius: 10px;
            margin: 12px 0;
        }

        .slider {
            width: 100%;
            height: 6px;
            -webkit-appearance: none;
            background: var(--card);
            outline: none;
            border-radius: 3px;
            margin: 10px 0;
        }

        .slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 18px;
            height: 18px;
            background: var(--accent);
            border-radius: 50%;
            cursor: pointer;
            transition: transform 0.1s;
        }

        .slider::-moz-range-thumb {
            width: 18px;
            height: 18px;
            background: var(--accent);
            border-radius: 50%;
            cursor: pointer;
            border: none;
            transition: transform 0.1s;
        }

        .slider::-webkit-slider-thumb:hover,
        .slider::-moz-range-thumb:hover {
            transform: scale(1.2);
        }

        .size-preview {
            width: 18px;
            height: 18px;
            background: var(--accent);
            border-radius: 50%;
            margin: 8px auto;
            transition: all 0.2s;
        }

        input[type="color"] {
            width: 100%;
            height: 40px;
            border: 1px solid rgba(255,255,255,0.1);
            border-radius: 8px;
            background: var(--card);
            padding: 2px;
        }

        button {
            background: var(--accent);
            border: none;
            padding: 12px 20px;
            border-radius: 8px;
            color: #042018;
            font-weight: 600;
            cursor: pointer;
            transition: transform 0.2s, box-shadow 0.2s;
        }

        button:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(16,185,129,0.2);
        }

        button.ghost {
            background: transparent;
            color: var(--muted);
            border: 1px solid rgba(255,255,255,0.04);
        }

        .muted {
            color: var(--muted);
            font-size: 13px;
            text-align: center;
            margin-top: 8px;
        }

        .hidden {
            display: none;
        }

        @media (max-width: 680px) {
            .wrap {
                margin: 16px auto;
                padding: 16px;
            }
            
            .canvas-wrap {
                flex-direction: column-reverse;
            }

            .controls {
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <div class="wrap card" id="page-draw">
        <h1>Desenhe para acessar</h1>
        <div class="canvas-wrap">
            <div class="canvas-box">
                <canvas id="userCanvas" width="500" height="360" role="img" aria-label="Área para desenhar"></canvas>
                <div class="muted">Trace por cima do molde</div>
            </div>
            <div class="controls">
                <div class="color-picker">
                    <label>Cor da tinta:</label>
                    <input type="color" id="colorPicker" value="#ef4444">
                </div>
                <div class="brush-size">
                    <label>Tamanho do pincel:</label>
                    <input type="range" id="brushSize" min="1" max="50" value="18" class="slider">
                    <div class="size-preview"></div>
                </div>
                <button id="checkBtn">Verificar desenho</button>
                <button class="ghost" id="clearBtn">Limpar</button>
            </div>
        </div>
    </div>

    <script>
        const userCanvas = document.getElementById('userCanvas');
        const uCtx = userCanvas.getContext('2d');
        const colorPicker = document.getElementById('colorPicker');

        // Template setup with embedded SVG
        const templateImg = new Image();
        templateImg.src = "data:image/svg+xml," + encodeURIComponent(`
            <svg xmlns="http://www.w3.org/2000/svg" width="500" height="360" viewBox="0 0 500 360">
                <ellipse cx="250" cy="180" rx="220" ry="130" fill="#0f7a2a"/>
                <ellipse cx="250" cy="180" rx="200" ry="110" fill="#16a34a"/>
                <ellipse cx="250" cy="180" rx="170" ry="95" fill="#ef4444"/>
                <g fill="#111" opacity="0.95">
                    <ellipse cx="200" cy="160" rx="6" ry="10" transform="rotate(-20 200 160)"/>
                    <ellipse cx="230" cy="140" rx="6" ry="10" transform="rotate(-10 230 140)"/>
                    <ellipse cx="270" cy="145" rx="6" ry="10" transform="rotate(10 270 145)"/>
                    <ellipse cx="300" cy="165" rx="6" ry="10" transform="rotate(20 300 165)"/>
                    <ellipse cx="250" cy="185" rx="6" ry="10"/>
                </g>
            </svg>
        `);

        // Drawing cache setup
        let userCache = document.createElement('canvas');
        userCache.width = 500 * (window.devicePixelRatio || 1);
        userCache.height = 360 * (window.devicePixelRatio || 1);
        let uc = userCache.getContext('2d');

        // Canvas setup
        function fitCanvas() {
            const box = userCanvas.parentElement.getBoundingClientRect();
            const cssWidth = Math.floor(box.width);
            const cssHeight = Math.floor(cssWidth * 360/500);
            const dpr = Math.max(1, window.devicePixelRatio || 1);
            
            userCanvas.width = cssWidth * dpr;
            userCanvas.height = cssHeight * dpr;
            userCanvas.style.width = cssWidth + 'px';
            userCanvas.style.height = cssHeight + 'px';
            
            drawOverlay();
        }

        // Draw template and user cache
        function drawOverlay() {
            uCtx.clearRect(0, 0, userCanvas.width, userCanvas.height);
            if(templateImg.complete) {
                const dpr = Math.max(1, window.devicePixelRatio || 1);
                const cssW = userCanvas.width / dpr;
                const cssH = userCanvas.height / dpr;
                const scale = Math.min(cssW / templateImg.width, cssH / templateImg.height) * 0.6;
                const w = templateImg.width * scale;
                const h = templateImg.height * scale;
                const x = (cssW - w)/2;
                const y = (cssH - h)/2;
                uCtx.save();
                uCtx.scale(dpr, dpr);
                uCtx.globalAlpha = 0.2;
                uCtx.drawImage(templateImg, x, y, w, h);
                uCtx.restore();
            }
            
            // Draw user cache
            const dpr = Math.max(1, window.devicePixelRatio || 1);
            uCtx.save();
            uCtx.globalAlpha = 0.75;
            uCtx.scale(1/dpr, 1/dpr);
            uCtx.drawImage(userCache, 0, 0);
            uCtx.restore();
        }

        // Drawing variables
        let drawing = false;
        let last = null;
        const brushSizeInput = document.getElementById('brushSize');
        const sizePreview = document.querySelector('.size-preview');
        
        // Update size preview
        function updateSizePreview() {
            const size = brushSizeInput.value;
            sizePreview.style.width = size + 'px';
            sizePreview.style.height = size + 'px';
        }
        
        brushSizeInput.addEventListener('input', updateSizePreview);
        updateSizePreview();
        
        // Convert pointer event to canvas coordinates
        function getPointerPos(e) {
            const rect = userCanvas.getBoundingClientRect();
            const dpr = window.devicePixelRatio || 1;
            
            let clientX, clientY;
            
            if (e.touches && e.touches.length > 0) {
                const touch = e.touches[0];
                const rect = userCanvas.getBoundingClientRect();
                clientX = touch.clientX - rect.left;
                clientY = touch.clientY - rect.top;
            } else {
                clientX = e.clientX - rect.left;
                clientY = e.clientY - rect.top;
            }
            
            // Converte as coordenadas do cliente para coordenadas do canvas
            const scaleX = userCanvas.width / (rect.width * dpr);
            const scaleY = userCanvas.height / (rect.height * dpr);
            
            return {
                x: clientX * scaleX,
                y: clientY * scaleY
            };
        }

        // Drawing handlers
        function startDrawing(e) {
            e.preventDefault();
            drawing = true;
            last = getPointerPos(e);
            
            // Atualiza a posição inicial para maior precisão no mobile
            if (e.touches && e.touches.length > 0) {
                const touch = e.touches[0];
                last = {
                    x: (touch.clientX - userCanvas.getBoundingClientRect().left) * (1 / window.devicePixelRatio),
                    y: (touch.clientY - userCanvas.getBoundingClientRect().top) * (1 / window.devicePixelRatio)
                };
            }
            
            if(e.pointerId !== undefined && e.target && e.target.setPointerCapture) {
                try { e.target.setPointerCapture(e.pointerId); } catch(err) {}
            }
            
            document.body.style.touchAction = 'none';
            document.documentElement.style.overflow = 'hidden';
            document.body.style.overflow = 'hidden';
        }

        function draw(e) {
            if(!drawing) return;
            if(typeof TouchEvent !== 'undefined' && e instanceof TouchEvent) e.preventDefault();
            
            const p = getPointerPos(e);
            const pressure = (e.pressure !== undefined) ? e.pressure : 
                           (e.touches && e.touches[0] && e.touches[0].force) ? e.touches[0].force : 0.5;
            
            const baseBrushSize = parseInt(brushSizeInput.value);
            const width = Math.max(2, baseBrushSize * (0.8 + pressure * 0.7));
            
            uc.beginPath();
            uc.strokeStyle = colorPicker.value;
            uc.lineWidth = width;
            uc.lineCap = 'round';
            uc.lineJoin = 'round';
            
            const sx = p.x * dpr, sy = p.y * dpr;
            const lx = last.x * dpr, ly = last.y * dpr;
            
            uc.moveTo(lx, ly);
            uc.lineTo(sx, sy);
            uc.stroke();
            
            last = p;
            drawOverlay();
        }

        function endDrawing(e) {
            drawing = false;
            last = null;
            document.body.style.touchAction = '';
            document.documentElement.style.overflow = '';
            document.body.style.overflow = '';
        }

        // Event listeners for touch and pointer events
        if ('ontouchstart' in window) {
            userCanvas.addEventListener('touchstart', function(e) {
                e.preventDefault(); // Previne zoom e scroll
                startDrawing(e);
            }, { passive: false });
            
            userCanvas.addEventListener('touchmove', function(e) {
                e.preventDefault();
                draw(e);
            }, { passive: false });
            
            userCanvas.addEventListener('touchend', endDrawing);
            userCanvas.addEventListener('touchcancel', endDrawing);
        }
        
        // Fallback para dispositivos não-touch
        userCanvas.addEventListener('pointerdown', startDrawing);
        userCanvas.addEventListener('pointermove', draw);
        window.addEventListener('pointerup', endDrawing);
        userCanvas.addEventListener('pointerup', (e) => {
            try {
                if(e.pointerId !== undefined && e.target && e.target.releasePointerCapture) {
                    e.target.releasePointerCapture(e.pointerId);
                }
            } catch(err) {}
        });
        
        // Previne gestos indesejados no mobile
        userCanvas.addEventListener('gesturestart', function(e) {
            e.preventDefault();
        }, { passive: false });
        
        // Desativa o scroll quando estiver desenhando
        document.body.addEventListener('touchmove', function(e) {
            if (drawing) {
                e.preventDefault();
            }
        }, { passive: false });

        // Verify drawing
        document.getElementById('checkBtn').addEventListener('click', () => {
            const res = computeMatch();
            if(res.overlapRatio >= 0.30) {
                window.location.href = 'grid.html';
            } else {
                alert('Continue tentando! Trace melhor a melancia... (' + Math.round(res.overlapRatio*100) + '%)');
            }
        });

        // Clear drawing
        document.getElementById('clearBtn').addEventListener('click', () => {
            uc.clearRect(0, 0, userCache.width, userCache.height);
            drawOverlay();
        });

        // Check drawing overlap
        function computeMatch() {
            if(!templateImg.complete) return {overlapRatio: 0};
            
            const tempCanvas = document.createElement('canvas');
            tempCanvas.width = userCache.width;
            tempCanvas.height = userCache.height;
            const tCtx = tempCanvas.getContext('2d');
            
            const cssW = userCanvas.width / (window.devicePixelRatio || 1);
            const cssH = userCanvas.height / (window.devicePixelRatio || 1);
            const scale = Math.min(cssW / templateImg.width, cssH / templateImg.height) * 0.6;
            const w = templateImg.width * scale;
            const h = templateImg.height * scale;
            const x = (cssW - w)/2;
            const y = (cssH - h)/2;
            const dpr = Math.max(1, window.devicePixelRatio || 1);
            
            tCtx.save();
            tCtx.scale(dpr, dpr);
            tCtx.drawImage(templateImg, x, y, w, h);
            tCtx.restore();

            const tData = tCtx.getImageData(0, 0, tempCanvas.width, tempCanvas.height).data;
            const uData = uc.getImageData(0, 0, userCache.width, userCache.height).data;
            let totalPixels = 0, matchedPixels = 0;
            
            for(let i = 0; i < tData.length; i += 4) {
                if(tData[i + 3] > 10) {
                    totalPixels++;
                    if(uData[i + 3] > 10) matchedPixels++;
                }
            }
            
            return {overlapRatio: totalPixels ? (matchedPixels / totalPixels) : 0};
        }

        // Initialize
        templateImg.addEventListener('load', fitCanvas);
        window.addEventListener('resize', fitCanvas);
        fitCanvas();
    </script>
</body>
</html>